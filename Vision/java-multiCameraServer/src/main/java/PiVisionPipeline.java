import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.RotatedRect;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.vision.VisionPipeline;
import edu.wpi.first.vision.VisionThread;

/**
* PiVisionPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class PiVisionPipeline implements VisionPipeline {

	//Outputs
	private Mat hsvThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private final double FOVangle = 52.0;
	private final double FOVangleY = 31.6;
	private final double degreePerPixel = (FOVangle / 160.0);
	private final double degreePerPixelY = (FOVangleY / 120.0);
	private double jagger = 0.0;
	private Point[] points0, points1;
	private Point largest0, largest1, lowest0, lowest1, highest0, highest1;
	private ArrayList<Target> list;
	private RotatedRect rect;

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override	public void process(Mat source0) {
		NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Started Pipeline", true);
		// Rotate Image 180 degrees
		Core.flip(source0, source0, -1);
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		double[] hsvThresholdHue = {56.654676258992815, 84.77815699658707};
		double[] hsvThresholdSaturation = {215.55755395683445, 255.0};
		double[] hsvThresholdValue = {57.329136690647566, 159.2662116040956};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Contours0:
		Mat findContoursInput = hsvThresholdOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 5.0;
		double filterContoursMinPerimeter = 10.0;
		double filterContoursMinWidth = 3.0;
		double filterContoursMaxWidth = 1000.0;
		double filterContoursMinHeight = 3.0;
		double filterContoursMaxHeight = 1000.0;
		double[] filterContoursSolidity = {0, 100};
		double filterContoursMaxVertices = 1000000.0;
		double filterContoursMinVertices = 0.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 1000.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);
		list = new ArrayList<Target>();

		if(filterContoursOutput.size() > 1)
		{
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Zero Contours", false);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("One Contours", false);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Two Contours", true);
			if(list.size() > 0)
			{
				list.clear();
			}
			for(int i = 1; i < filterContoursOutput.size(); i++)
			{
				double panav = 0.0;
				NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Made it into For loop", true);
				updateContours(i);
				if(rect.angle > (180 - (90 + rect.angle)))
				{
					list.add(new Target());
					list.get(list.size() - 1).setSmallest0(lowest0);
					list.get(list.size() - 1).setSmallest1(lowest1);
					list.get(list.size() - 1).setLargest0(largest0);
					list.get(list.size() - 1).setLargest1(largest1);
					list.get(list.size() - 1).setCenterPoint(findCenter());
					list.get(list.size() - 1).setDistance(findDistance());
					list.get(list.size() - 1).setAngle(findTheta());
					list.get(list.size() - 1).setHeightRatio(findAngleHeights());//error here
					list.get(list.size() - 1).setTargetAngle(findTargetAngle());
					list.get(list.size() - 1).setTargetLength(findTargetHeight());
					list.get(list.size() - 1).setNumber(i);
					list.get(list.size() - 1).publishToNetworkTable();
				}
				NetworkTable.getTable("GRIP/myContoursReport").putNumber("Loop Count", panav);
			}
			NetworkTable.getTable("GRIP/myContoursReport").putNumber("Filtered Contours", filterContoursOutput.size());
		}
		else if(filterContoursOutput.size() > 0)
		{
			if(list.size() > 0)
			{
				list.clear();
			}
			updateContours(0);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Zero Contours", false);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("One Contours", true);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Two Contours", false);
			NetworkTable.getTable("GRIP/myContoursReport").putNumber("Filtered Contours", filterContoursOutput.size());
		}
		else
		{
			if(list.size() > 0)
			{
				list.clear();
			}
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Zero Contours", true);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("One Contours", false);
			NetworkTable.getTable("GRIP/myContoursReport").putBoolean("Two Contours", false);
			NetworkTable.getTable("GRIP/myContoursReport").putNumber("Filtered Contours", filterContoursOutput.size());
		}
		NetworkTable.getTable("GRIP/myContoursReport").putNumber("Count", jagger);
		System.out.println("Count: " + jagger);
		jagger++;
		NetworkTable.getTable("GRIP/myContoursReport").putNumber("Number of Targets", list.size());
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}


	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param Solidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
		double minPerimeter, double minWidth, double maxWidth, double minHeight, double
		maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
		minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;
			output.add(contour);
		}
	}
	public Point findCenter()
	{
		Point toReturn = new Point();

		toReturn.x = (largest0.x + largest1.x) / 2;
		toReturn.y = (largest0.y + largest1.y) / 2;
		//NetworkTable.getTable("GRIP").putString("Test2", "Getting past second for loop");
		//NetworkTable.getTable("GRIP").putString("Test3", "Getting past to end");

		//toReturn = new Point(-2, -2);

		return toReturn;
	}
	public double findDistance()
	{		
		final double L = (8.0 / 12.0); 
		double w = 160.0, Wp = findCenterDistance(), distance;

		distance = (L * w) / (2 * Wp * Math.tan(Math.toRadians(52.0 / 2.0)));
	
		return distance;
	}

	public double findCenterDistance()
	{
		return largest1.x - largest0.x;
	}
	
	public double findAngleHeights() {
		int counterAngleHeights = 0;
		counterAngleHeights++;
		Point high0, high1, low0, low1;

		high0 = points0[0];
		high1 = points1[0];
		low0 = points0[0];
		low1 = points1[0];
		for(Point p : points0) {
			if(p.y > high0.y) {
				high0 = p;
			}
			if(p.y < low0.y) {
				low0 = p;
			}
		}
		
		
		for(Point p : points1) {
			if(p.y > high1.y) {
				high1 = p;
			}
			if(p.y < low1.y) {
				low1 = p;
			}
		}
		
		double ratio = -99.1;
		//double angle = 0.0;
		//double heightDifference = 0.0;
		//heightDifference = largest1.y - largest0.y;

		double heightCont0 = high0.y - low0.y;
		double heightCont1 = high1.y - low1.y;

		if(heightCont1 > 0 ) {
			ratio = heightCont0 / heightCont1;
		}

		//double trigRatio = (largest0y.y - largest1.y);
		/*
		try {
			angle = Math.atan((largest1y.y - largest0y.y) / (largest1y.x - largest0y.x));
			angle = Math.toDegrees(angle);
		} catch (Exception e) {
			angle = -190;
		}
		*/

		//NetworkTable.getTable("GRIP/myContoursReport").putNumber("AngleHeights Count", counterAngleHeights);
		//NetworkTable.getTable("GRIP/myContoursReport").putNumber("Height Difference", heightDifference);
		//NetworkTable.getTable("GRIP/myContoursReport").putNumber("Height of Contour 0", heightCont0);
		//NetworkTable.getTable("GRIP/myContoursReport").putNumber("Height of Contour 1", heightCont1);
		return ratio;
	}
	public double findTheta()
	{
		double theta;
		theta = (80 - findCenter().x) * degreePerPixel;
		return theta;
	}
	public void updateContours(int x)
	{
		MatOfPoint2f contour;
		if(filterContoursOutput.size() > 1)
		{
			points0 = filterContoursOutput.get(x - 1).toArray();
			points1 = filterContoursOutput.get(x).toArray();
			largest0 = points0[0];
			largest1 = points1[0];
			lowest0 = points0[0];
			lowest1 = points1[0];
			highest0 = points0[0];
			highest1 = points1[0];
			contour = new MatOfPoint2f(filterContoursOutput.get(x - 1).toArray());
			rect = Imgproc.minAreaRect(contour);

			if (largest1.x < largest0.x){
				Point[] temp = points0;
				points0 = points1;
				points1 = temp;

				largest0 = points0[0];
				largest1 = points1[0];
				lowest0 = points0[0];
				lowest1 = points1[0];
				highest0 = points0[0];
				highest1 = points1[0];
			}

			for(Point p : points0) {
				if(p.x > largest0.x) {
					largest0 = p;
				}
				if(p.y > lowest0.y) {
					lowest0 = p;
				}
				if(p.y < highest0.y) {
					highest0 = p;
				}
			}
			
			for(Point p : points1) {
				if(p.x < largest1.x) {
					largest1 = p;
				}
				if(p.y > lowest1.y) {
					lowest1 = p;
				}
				if(p.y < highest1.y) {
					highest1 = p;
				}
			}
		}
		else if(filterContoursOutput.size() > 0)
		{
			points0 = filterContoursOutput.get(x).toArray();

			largest0 = points0[0];
			lowest0 = points0[0];
			highest0 = points0[0];

			if (largest0.x < 80){
				for(Point p : points0) {
					if(p.x > largest0.x) {
						largest0 = p;
					}
					if(p.y > lowest0.y) {
						lowest0 = p;
					}
					if(p.y < highest0.y) {
						highest0 = p;
					}
				}
			}
			else
			{
				for(Point p : points0) {
					if(p.x < largest0.x) {
						largest0 = p;
					}
					if(p.y > lowest0.y) {
						lowest0 = p;
					}
					if(p.y < highest0.y) {
						highest0 = p;
					}
				}
			}
		}
		else
		{
			largest0 = new Point(-1.0, -1.0);
			largest1 = new Point(-1.0, -1.0);
			lowest0 = new Point(-1.0, -1.0);
			lowest1 = new Point(-1.0, -1.0);
		}
	}
	public double findTargetHeight() 
	{
		if(lowest0.y > lowest1.y)
		{
			return findCenter().y - lowest0.y;
		}
		else
		{
			return findCenter().y - lowest1.y;
		}
	}
	public double findTargetAngle()
	{
		return findTargetHeight() * degreePerPixelY;
	}
}

